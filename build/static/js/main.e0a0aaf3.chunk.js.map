{"version":3,"sources":["Images/covid.png","Components/Cards/Cards.js","API/index.js","Components/Chart/Chart.js","Components/StatePicker/StatePicker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","card","matches","margin","confirmed","borderBottom","active","recovered","deaths","Cards","props","console","log","data","useMediaQuery","Grid","container","justify","style","item","component","Card","xs","md","Object","assign","CardContent","Typography","color","gutterBottom","variant","start","end","parseInt","duration","separator","Date","lastupdatedtime","toDateString","url","fetchData","a","axios","get","statewise","fetchDailyData","cases_time_series","modifiedData","map","dailyData","totalconfirmed","totalrecovered","totaldeceased","date","fetchAPI","states","state","Chart","fetchedData","this","setState","lineChart","length","labels","datasets","label","borderColor","fill","barChart","backgroundColor","options","legend","display","title","text","justifyContent","width","marginBottom","React","Component","StatePicker","shift","name","FormControl","InputLabel","id","Select","labelId","value","onChange","e","handleStates","target","MenuItem","i","key","App","val","temp","isEmpty","className","Fragment","src","covidImage","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e0a0aaf3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";","import React from 'react';\r\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\r\nimport CountUp from 'react-countup';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nconst card = {\r\n  container: (matches) => ({\r\n    margin: matches ? '2% 0' : '0 2%',\r\n  }),\r\n};\r\n\r\nconst confirmed = {\r\n  borderBottom: '10px solid rgba(0, 255, 255, 0.5)',\r\n};\r\n\r\nconst active = {\r\n  borderBottom: '10px solid rgba(0, 0, 255, 0.5)',\r\n};\r\n\r\nconst recovered = {\r\n  borderBottom: '10px solid rgba(0, 255, 0, 0.5)',\r\n};\r\n\r\nconst deaths = {\r\n  borderBottom: '10px solid rgba(255, 0, 0, 0.5)',\r\n};\r\n\r\nconst Cards = (props) => {\r\n  console.log(props.data);\r\n  const matches = useMediaQuery('(max-width:770px)');\r\n  return (\r\n    <div>\r\n      <Grid container justify=\"center\" style={{ margin: '50px 0px' }}>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={2}\r\n          style={Object.assign({}, card.container(matches), confirmed)}\r\n        >\r\n          {props.data && (\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Confirmed\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={parseInt(props.data.confirmed)}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(props.data.lastupdatedtime).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Total number of COVID-19 cases\r\n              </Typography>\r\n            </CardContent>\r\n          )}\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={2}\r\n          style={Object.assign({}, card.container(matches), active)}\r\n        >\r\n          {props.data && (\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Active\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={parseInt(props.data.active)}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(props.data.lastupdatedtime).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of active cases of COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          )}\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={2}\r\n          style={Object.assign({}, card.container(matches), recovered)}\r\n        >\r\n          {props.data && (\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Recovered\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={parseInt(props.data.recovered)}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(props.data.lastupdatedtime).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of recoveries from COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          )}\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={2}\r\n          style={Object.assign({}, card.container(matches), deaths)}\r\n        >\r\n          {props.data && (\r\n            <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>\r\n                Deaths\r\n              </Typography>\r\n              <Typography variant=\"h5\">\r\n                <CountUp\r\n                  start={0}\r\n                  end={parseInt(props.data.deaths)}\r\n                  duration={2.5}\r\n                  separator=\",\"\r\n                />\r\n              </Typography>\r\n              <Typography color=\"textSecondary\">\r\n                {new Date(props.data.lastupdatedtime).toDateString()}\r\n              </Typography>\r\n              <Typography variant=\"body2\">\r\n                Number of deaths caused by COVID-19\r\n              </Typography>\r\n            </CardContent>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://api.covid19india.org/data.json';\r\n\r\nexport const fetchData = async () => {\r\n  try {\r\n    const {\r\n      data: { statewise },\r\n    } = await axios.get(url);\r\n    return statewise;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const {\r\n      data: { cases_time_series },\r\n    } = await axios.get(url);\r\n    const modifiedData = cases_time_series.map((dailyData) => ({\r\n      confirmed: dailyData.totalconfirmed,\r\n      active: dailyData.totalconfirmed - dailyData.totalrecovered,\r\n      deaths: dailyData.totaldeceased,\r\n      recovered: dailyData.totalrecovered,\r\n      date: dailyData.date,\r\n    }));\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n\r\nexport const fetchAPI = async () => {\r\n  try {\r\n    const {\r\n      data: { statewise },\r\n    } = await axios.get(url);\r\n    const modifiedData = statewise.map((states) => states.state);\r\n    return modifiedData;\r\n  } catch (error) {}\r\n};\r\n","import React from 'react';\r\nimport { fetchDailyData } from '../../API';\r\nimport { Line, Bar } from 'react-chartjs-2';\r\n\r\nclass Chart extends React.Component {\r\n  state = {\r\n    data: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchDailyData();\r\n    this.setState({\r\n      data: fetchedData,\r\n    });\r\n    console.log('Inside Chart: ', this.state.data);\r\n  }\r\n\r\n  render() {\r\n    const { data, states } = this.props;\r\n    const container = {\r\n      display: 'flex',\r\n      justifyContent: 'center',\r\n      width: '75%',\r\n      marginBottom: '50px',\r\n    };\r\n    const lineChart = this.state.data.length ? (\r\n      <Line\r\n        data={{\r\n          labels: this.state.data.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: this.state.data.map(({ confirmed }) => confirmed),\r\n              label: 'Confirmed',\r\n              borderColor: 'rgb(0, 255, 255)',\r\n              fill: true,\r\n            },\r\n            {\r\n              data: this.state.data.map(({ active }) => active),\r\n              label: 'Active',\r\n              borderColor: 'rgb(0, 0, 255)',\r\n              fill: true,\r\n            },\r\n            {\r\n              data: this.state.data.map(({ deaths }) => deaths),\r\n              label: 'Deaths',\r\n              borderColor: 'rgb(255, 0, 0)',\r\n              fill: true,\r\n            },\r\n            {\r\n              data: this.state.data.map(({ recovered }) => recovered),\r\n              label: 'Recovered',\r\n              borderColor: 'rgb(0, 255, 0)',\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n    const barChart = this.state.data.length ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Active', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: [\r\n                'rgba(0, 0, 255, 0.5)',\r\n                'rgba(0, 255, 0, 0.5)',\r\n                'rgba(255, 0, 0, 0.5)',\r\n              ],\r\n              data: [data.active, data.recovered, data.deaths],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current in ${states}` },\r\n        }}\r\n      />\r\n    ) : null;\r\n\r\n    return (\r\n      <div style={container}>{states.length !== 0 ? barChart : lineChart}</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Chart;\r\n","import React from 'react';\r\nimport { Select, FormControl, MenuItem, InputLabel } from '@material-ui/core';\r\nimport { fetchAPI } from './../../API';\r\n\r\nclass StatePicker extends React.Component {\r\n  state = {\r\n    data: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchAPI();\r\n    fetchedData.shift();\r\n    this.setState({\r\n      data: fetchedData,\r\n      name: '',\r\n    });\r\n    console.log('Inside StatePicker: ', this.state.data);\r\n  }\r\n  render() {\r\n    const form = {\r\n      width: '30%',\r\n      marginBottom: '30px',\r\n    };\r\n    return (\r\n      <FormControl style={form}>\r\n        <InputLabel id=\"inputLabel\">Total</InputLabel>\r\n        <Select\r\n          labelId=\"inputLabel\"\r\n          value={this.state.name}\r\n          onChange={(e) => {\r\n            this.props.handleStates(e.target.value);\r\n            this.setState({\r\n              name: e.target.value,\r\n            });\r\n          }}\r\n        >\r\n          <MenuItem value=\"Total\">Total</MenuItem>\r\n          {this.state.data.map((states, i) => (\r\n            <MenuItem value={states} key={i}>\r\n              {states}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    );\r\n  }\r\n}\r\nexport default StatePicker;\r\n","import React from 'react';\nimport './App.css';\nimport Cards from './Components/Cards/Cards';\nimport Chart from './Components/Chart/Chart';\nimport StatePicker from './Components/StatePicker/StatePicker';\nimport { fetchData } from './API';\nimport covidImage from './Images/covid.png';\n\nclass App extends React.Component {\n  state = {\n    data: [],\n    states: '',\n    value: {},\n  };\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({\n      data: fetchedData,\n      value: fetchedData[0],\n    });\n    // this.state.data.shift();\n    console.log(this.state.data);\n  }\n  handleStates = async (states) => {\n    var temp;\n    for (let val of this.state.data) {\n      if (val.state === states) {\n        temp = val;\n        break;\n      }\n    }\n    this.setState({\n      value: temp,\n      states: states,\n    });\n    console.log(temp);\n  };\n  isEmpty = () => {\n    for (var i in this.state.value) {\n      return false;\n    }\n    return true;\n  };\n  render() {\n    const { value, states } = this.state;\n    console.log('value: ', this.isEmpty(value));\n    return (\n      <div className=\"App\">\n        {!this.isEmpty(value) && (\n          <React.Fragment>\n            <img className=\"imgStyle\" src={covidImage} alt=\"COVID-19\" />\n            <Cards data={value} />\n            <StatePicker handleStates={this.handleStates} />\n            <Chart data={value} states={states} />\n          </React.Fragment>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}